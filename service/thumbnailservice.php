<?php
/**
 * ownCloud - galleryplus
 *
 * This file is licensed under the Affero General Public License version 3 or
 * later. See the COPYING file.
 *
 * @author Olivier Paroz <owncloud@interfasys.ch>
 * @author Robin Appelman <icewind@owncloud.com>
 *
 * @copyright Olivier Paroz 2014-2015
 * @copyright Robin Appelman 2012-2015
 */

namespace OCA\GalleryPlus\Service;

use OCP\Util;
use OCP\ILogger;

use OCP\AppFramework\Http;

/**
 * Collects and returns thumbnails for the list of images which is submitted to
 * the service
 *
 * Uses EventSource to send back thumbnails as soon as they're ready
 *
 * @package OCA\GalleryPlus\Service
 */
class ThumbnailService {

	/**
	 * @type ILogger
	 */
	private $logger;
	/**
	 * @type PreviewService
	 */
	private $previewService;

	/**
	 * Constructor
	 *
	 * @param string $appName
	 * @param ILogger $logger
	 * @param PreviewService $previewService
	 */
	public function __construct(
		$appName,
		ILogger $logger,
		PreviewService $previewService
	) {

		$this->appName = $appName;
		$this->logger = $logger;
		$this->previewService = $previewService;
	}

	/**
	 * Sends previews of each image contained in the $images array using
	 * EventSource
	 *
	 * The data is generated by the PreviewService and is base64 encoded
	 *
	 * @param string $images
	 * @param bool $square
	 * @param bool $scale
	 */
	public function getAlbumThumbnails($images, $square, $scale) {
		$imagesArray = explode(';', $images);

		/**
		 * WARNING: We can't close the session here because public galleries
		 * of encrypted files would not get their previews
		 */

		// That's one way of making a version of an app backward compatible
		if (version_compare(implode('.', Util::getVersion()), '7.8', '<=')) {
			$eventSource = new \OC_EventSource(); // Using a private API in OC7
		} else {
			$eventSource = \OC::$server->createEventSource();
		}

		foreach ($imagesArray as $image) {
			$height = 200 * $scale;
			if ($square) {
				/**
				 * Album thumnails need to be 200x200 and some will be resized
				 * by the browser to 200x100 or 100x100
				 */
				$width = $height;
			} else {
				/**
				 * Standard thumbnails are 400x200
				 */
				$width = 2 * $height;
			}

			$preview = $this->previewService->createThumbnails(
				$image, $width, $height, !$square
			);

			$preview['data']['image'] = $image;
//			/** We need to break it down because the previewData can be a large
//			 * stream due to the base64 encoding */
//			$this->logger->debug(
//				"[Batch] THUMBNAIL NAME : {image} / PATH : {path} / MIME : {mimetype} / DATA : {preview}",
//				array(
//					'app'      => $this->appName,
//					'image'    => $preview['data']['image'],
//					'path'     => $preview['data']['path'],
//					'mimetype' => $preview['data']['mimetype'],
//					'preview'  => substr($preview['data']['preview'], 0, 20),
//				)
//			);

			$eventSource->send('preview', $preview);
		}
		$eventSource->close();

		/**
		 * FIXME: @LukasReschke says: The exit is required here because
		 * otherwise the AppFramework is trying to add headers as well after
		 * dispatching the request which results in a "Cannot modify header
		 * information" notice.
		 * WARNING: Returning a JSON response does not work.
		 */
		exit();
	}

}
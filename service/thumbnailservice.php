<?php
/**
 * ownCloud - galleryplus
 *
 * This file is licensed under the Affero General Public License version 3 or
 * later. See the COPYING file.
 *
 * @author Olivier Paroz <owncloud@interfasys.ch>
 * @author Robin Appelman <icewind@owncloud.com>
 *
 * @copyright Olivier Paroz 2014-2015
 * @copyright Robin Appelman 2012-2015
 */

namespace OCA\GalleryPlus\Service;

use OCP\IEventSource;

use OCA\GalleryPlus\Utility\SmarterLogger;

/**
 * Collects and returns thumbnails for the list of images which is submitted to
 * the service
 *
 * Uses EventSource to send back thumbnails as soon as they're ready
 *
 * @package OCA\GalleryPlus\Service
 */
class ThumbnailService {

	/**
	 * @type string
	 */
	private $appName;
	/**
	 * @type SmarterLogger
	 */
	private $logger;
	/**
	 * @type IEventSource
	 */
	private $eventSource;
	/**
	 * @type PreviewService
	 */
	private $previewService;


	/**
	 * Constructor
	 *
	 * @param string $appName
	 * @param SmarterLogger $logger
	 * @param IEventSource $eventSource
	 * @param PreviewService $previewService
	 */
	public function __construct(
		$appName,
		SmarterLogger $logger,
		IEventSource $eventSource,
		PreviewService $previewService
	) {
		$this->appName = $appName;
		$this->logger = $logger;
		$this->previewService = $previewService;
		$this->eventSource = $eventSource;
	}

	/**
	 * Sends previews of each image contained in the $images array using
	 * EventSource
	 *
	 * The data is generated by the PreviewService and is base64 encoded
	 *
	 * WARNING: We can't close the session here because public galleries
	 * of encrypted files would not get their previews
	 *
	 * FIXME: @LukasReschke says: The exit is required here because
	 * otherwise the AppFramework is trying to add headers as well after
	 * dispatching the request which results in a "Cannot modify header
	 * information" notice.
	 * WARNING: Returning a JSON response does not work.
	 *
	 * @param string $images
	 * @param bool $square
	 * @param bool $scale
	 */
	public function getAlbumThumbnails($images, $square, $scale) {
		$imagesArray = explode(';', $images);

		$this->createThumbnails($imagesArray, $square, $scale);

		$this->eventSource->close();

		exit();
	}

	/**
	 * Asks the Thumbnail service to send us thumbnails
	 *
	 * Album thumnails need to be 200x200 and some will be resized by the
	 * browser to 200x100 or 100x100.
	 * Standard thumbnails are 400x200.
	 *
	 * Sample logger
	 * We can't just send previewData as it can be quite a large stream
	 * $this->logger->debug("[Batch] THUMBNAIL NAME : {image} / PATH : {path} /
	 * MIME : {mimetype} / DATA : {preview}", array(
	 *                'image'    => $preview['data']['image'],
	 *                'path'     => $preview['data']['path'],
	 *                'mimetype' => $preview['data']['mimetype'],
	 *                'preview'  => substr($preview['data']['preview'], 0, 20),
	 *              )
	 *            );
	 *
	 * @param string[] $imagesArray
	 * @param bool $square
	 * @param bool $scale
	 */
	private function createThumbnails($imagesArray, $square, $scale) {
		foreach ($imagesArray as $image) {
			$height = 200 * $scale;
			if ($square) {
				$width = $height;
			} else {
				$width = 2 * $height;
			}

			$preview = $this->previewService->createThumbnails($image, $width, $height, !$square);
			$this->eventSource->send('preview', $preview);
		}
	}
}